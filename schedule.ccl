# Schedule definitions for thorn HelloHydro
# What is the correct schedule for this to work? HydroBase something??
# Storage for metric quantities
STORAGE: gmunu[1], gmunucon[1], sqrtg[1], spatialderiv[1], timederiv[1]

schedule HelloHydro in HydroBase_RHS
{
    LANG: Fortran
    STORAGE: HydroBase::rho[3]
    SYNC: HydroBase::rho
    READS: HydroBase::rho(everywhere)
    WRITES: HydroBase::rho(everywhere)
} "Generate new density"

schedule calc_press in HydroBase_RHS after HelloHydro
{
    LANG: Fortran 
} "Calculate new pressure from evolved density"

schedule HelloHydro_Tmunu in AddToTmunu  
{
    LANG: Fortran
    WRITES: TmunuBase::eTtt(everywhere)
    
    
}"Add the primative variable contributions to the stress energy tensor"

schedule HelloHydro_metric_init in HydroBase_Initial before HelloHydro_init after FLRW_NoPerturb
{
  WRITES: gmunu, gmunucon,sqrtg
  SYNC: gmunu, gmunucon, sqrtg
  LANG: Fortran
}"Get the 4metric to pass to phantom initialy"

schedule HelloHydro_init in HydroBase_Initial after FLRW_NoPerturb
{
    LANG: Fortran 

}"Set pressure from density"

schedule HelloHydro_setboundary_Tmunu in AddToTmunu after HelloHydro_Tmunu
{
    LANG: Fortran 
}"Copy stress energy tensor to ghost zones"

schedule HelloHydro_metric in HydroBase_RHS before HelloHydro
{
    LANG: Fortran
    SYNC: gmunu, gmunucon, sqrtg
}"Calculate the components of the 4 metric and its deriv and sqrtdet"

schedule HelloHydro_diff in HydroBase_RHS before HelloHydro
{
    LANG: Fortran 
}"Calculate the spatial derivaties with finite diff" 

schedule HelloHydro_metricderiv in HydroBase_RHS before HelloHydro
{
    LANG: Fortran
    #SYNC: spatialderiv
}"Calculate the spatial derivatives of the spatial metric" 

#schedule HelloHydro_metric_global in HydroBase_RHS before HelloHydro after HelloHydro_metric
#{
#    LANG: Fortran
#   
#} "Pass the global array of metric quantities (gmunu, gmunucon, sqrtg, etc.)to phantom"


# HelloHydro's variable storage
#STORAGE: hello_rho[1]
#STORAGE: hello_press[1]

#STORAGE: ADMBase::metric[3], ADMBase::curv[3]
#STORAGE: ADMBase::lapse[3]
